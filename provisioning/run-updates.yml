---

# EXPERIMENTAL Run Drupal update process for drupal-composer projects
# within Drupal-VM environment.
#   - Performs code update.
#   - Calls geerlingguy.drupal post-update tasks.
#   - Runs Wraith smoke test on updated code.
#
# Prerequisites:
#   - VM is already set up to run Drupal.
#   - Drupal code exists.
#   - Drupal-VM configuration files are present and correct.
#
# Usage:
#   `ansible-playbook provisioning/run-updates.yml`
#
# Extra Variables:
#   - drupal_update_security_only: Boolean. Default = False. If True, only
#     security updates will be applied.
#   - drupal_update_projects: Space-separated list of projects to update,
#     as for `drush pm-updatestatus`.  Default = '' (update all projects).
#
# TODO:
#   - Support non-composer projects.
#   - Move Wraith installation to role.

- hosts: all
  become: No
  vars:
    # Wraith requirement.  For simplicity, using default version of geerlingguy.ruby.
    ruby_min_version: 2.3.0
    npm_min_version: 3.10.10

    # Set the version of Node.js to install ("0.10", "0.12", "4.x", "5.x", "6.x").
    # Version numbers from Nodesource: https://github.com/nodesource/distributions
    nodejs_version: "6.x"

    # The user for whom the npm packages will be installed.
    nodejs_install_npm_user: "{{ ansible_user }}"

    # The directory for global installations.
    npm_config_prefix: "~/.npm-global"

    # Set to true to suppress the UID/GID switching when running package scripts. If set explicitly to false, then installing as a non-root user will fail.
    npm_config_unsafe_perm: "true"

    # The path of a package.json file used to install packages globally.
    nodejs_package_json_path: ""


  vars_files:
    - vars/main.yml
    - ../default.config.yml

  pre_tasks:
    - name: Include OS-specific variables.
      include_vars: "{{ ansible_os_family }}.yml"

    - name: Define config_dir.
      set_fact:
        config_dir: "{{ playbook_dir }}/.."
      when: config_dir is not defined
      tags: ['always']

    # config.yml is imported first b/c the PHP version switching wasn't working
    # with all items in one list.
    - include_vars: "{{ item }}"
      with_fileglob:
        - "{{ config_dir }}/config.yml"
      tags: ['always']

    - include_vars: "{{ item }}"
      with_fileglob:
        - "{{ config_dir }}/config.php{{ php_version }}.yml"
        - "{{ config_dir }}/local.config.yml"
        - "{{ config_dir }}/{{ lookup('env', 'DRUPALVM_ENV')|default(drupalvm_env, true)|default(ansible_env.DRUPALVM_ENV)|default(omit) }}.config.yml"
      tags: ['always']

    - name: Get ruby version.
      command: "ruby -e 'puts RUBY_VERSION'"
      ignore_errors: True
      register: ruby_current_version

    - name: Set `ruby_install`.
      set_fact:
        ruby_install: "{{ ruby_current_version.failed | default(False) or ruby_current_version.stdout < ruby_min_version }}"

    # TODO: proper check if npm is installed.
    - name: Get npm version.
      command: "npm -v"
      ignore_errors: True
      register: npm_current_version

    - name: Set `npm_install`.
      set_fact:
        npm_install: "{{ npm_current_version.failed | default(False) or npm_current_version.stdout < npm_min_version }}"

  roles:

    # Install Ruby for Wraith testing
    - role: geerlingguy.ruby
      ruby_install_from_source: true
      workspace: /root
      become: Yes
      when: ruby_install | default(False) and wraith_testing_framework.install | default(False)

    - role: geerlingguy.nodejs
      become: Yes
      when: npm_install and wraith_testing_framework.install | default(False)

    # Deploy Drupal if necessary.
    # Todo: Add git repo and clone variables.
    - role: kentr.drupal
      tags: ['drupal']

  tasks:

  - name: Create `updates` Git branch if necessary.
    command: "git --git-dir={{ web_app_project_root }}/.git/ --work-tree={{ web_app_project_root }} checkout --track -B updates origin/master"

  - name: Set drupal_update_security_only if it's not already defined.
    set_fact:
      drupal_update_security_only: True
    when: drupal_update_security_only is not defined

  - name: Get drush version.
    command: "{{ drush_path }} status --field=drush-version"
    args:
      chdir: "{{ drupal_core_path }}"
    register: drush_version_result

  - name: Determine if this is composer project.
    stat: "path={{ web_app_project_root }}/composer.json"
    # Use drupal_deploy_composer_file for consistency & reuse with geerlinguy.drupal.
    register: drupal_deploy_composer_file

  - name: Find updates, Drush 8.x.
    # TODO: Is the `-l` option necessary with sites.php?
    command: "{{ drush_path | default('drush') }} -l {{ config_site_directory }} pm-updatestatus {{ drupal_update_projects | default('') }} --pipe {{ drupal_update_security_only | default(True) | bool | ternary('--security-only', '') }}"
    args:
      chdir: "{{ drupal_core_path }}"
    register: updates_available_result
    when: drush_version_result.stdout | version_compare('9', '<')

  - name: Set `updates_available`, Drush 8.x.
    set_fact:
      # Though it's silly to strip out "drupal/" only to replace it later, we need to
      # allow for a list from other sources, such as from `drush pm:sec`.
      updates_available: "{{ drush_version_result.stdout_lines }}"
    when: drush_version_result.stdout | version_compare('9', '<')

  - name: Find updates, Drush 9.x, all updates.
    composer:
      command: "show"
      arguments: "--outdated --format=json drupal/*"
      working_dir: "{{ web_app_project_root }}"
    register: updates_available_result
    when: drush_version_result.stdout | version_compare('9', '>=') and not drupal_update_security_only

  - name: Set `updates_available`, Drush 9.x, all updates.
    set_fact:
      # Though it's silly to strip out "drupal/" only to replace it later, we have to
      # allow for a list from other sources, such as from `drush pm:sec`.
      updates_available: "{{ (updates_available_result.stdout | from_json)['installed'] | map(attribute='name') | map('regex_replace', '^drupal/', '') | list }}"
    when: drush_version_result.stdout | version_compare('9', '>=') and not drupal_update_security_only

  - name: Find updates, Drush 9.x, security-only.
    command: "{{ drush_path }} sec --format=json"
    args:
      chdir: "{{ drupal_core_path }}"
    register: updates_available_result
    when: drush_version_result.stdout | version_compare('9', '>=') and drupal_update_security_only

  - name: Run `drush pm-update`.
    # TODO: Is the `-l` option necessary with sites.php?
    command: "{{ drush_path }} -l {{ config_site_directory }} up -y --pipe {{ updates_available | join(' ') }}"
    args:
      chdir: "{{ drupal_core_path }}"
    register: drupal_updates_download
    when: drupal_deploy_composer_file.stat.exists == False

  - name: Download updates with composer.
    composer:
      command: "update"
      # Substitutes "core" for "drupal".
      # Todo: make this substitution smarter, based on what's actually installed.
      arguments: "{{ updates_available | map('regex_replace', '^drupal$', 'core') | map('regex_replace', '^(.*)$', 'drupal/\\1') | join(' ') }}"
      optimize_autoloader: True
      # By default, Drupal composer projects install dev dependencies.
      # We want to follow that behavior here.
      no_dev: False
      working_dir: "{{ web_app_project_root }}"
    # with_items: "{{ updates_available }}"
    register: drupal_updates_download
    when: drupal_deploy_composer_file.stat.exists == True and updates_available | length > 0

  - name: Define `drupal_updates_updated`.
    set_fact:
      drupal_updated: "{{ drupal_updates_download.changed | default(false) }}"

  - name: Run Drupal post-update tasks.
    include_tasks: "roles/geerlingguy.drupal/tasks/update.yml"
    when: drupal_major_version == 8 and drupal_updated | default(false)

  - include_tasks: "{{ post_provision_tasks_dir | dirname }}/general-setup-wraith.yml"
    when: drupal_updated | default(False)

  # Install Wraith itself.  Assumes that dependencies are already installed.
  - include_tasks: "{{ playbook_dir }}/../scripts/misc/tasks/wraith-install.yml"
    become: no
    when: drupal_updated | default(false)

  - include_tasks: "{{ playbook_dir }}/../scripts/misc/tasks/wraith-smoke-test.yml"
    become: no
    when: drupal_updated | default(false)
