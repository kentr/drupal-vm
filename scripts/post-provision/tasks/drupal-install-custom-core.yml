---

# Tasks for installing pre-existing web app project onto VM.

- name: Custom core - Ensure web_app_project_root directory exists.
  file:
    path: "{{ web_app_project_root }}"
    state: directory
    # Don't recursively set permissions.  May cause dirty repo.
    recurse: no
    mode: 0775
    owner: "{{ drupal_core_owner }}"
    group: "{{ drupal_core_owner }}"
  become: yes
  when: project_type == "drupal" and web_app_project_root is defined

- name: Custom core - ensure sites/default directory exists and is writable.
  file:
    path: "{{ drupal_core_path }}/sites/default"
    mode: "ug+w"
    state: directory
  when: project_type == "drupal"

- name: Ensure public files directory.
  file:
    path: "{{ drupal_file_public_path }}"
    state: directory
    owner: "{{ drupal_core_owner }}"
    group: "{{ drupal_core_owner }}"
  when: project_type == "drupal" and drupal_file_public_path is defined and drupal_file_public_path | trim != ''

- name: Ensure private files directory.
  file:
    path: "{{ drupal_file_private_path }}"
    state: directory
    owner: "{{ drupal_core_owner }}"
    group: "{{ drupal_core_owner }}"
  when: project_type == "drupal" and drupal_file_private_path is defined and drupal_file_private_path | trim != ''

- name: Ensure private files .htaccess.
  template:
    # Src is relative to provisioning directory.
    src: "../scripts/post-provision/templates/private_files_htaccess.j2"
    dest: "{{ drupal_file_private_path }}/.htaccess"
    force: No
  when: project_type == "drupal" and drupal_file_private_path is defined and drupal_file_private_path | trim != ''

- name: Ensure config sync directory.
  file:
    path: "{{ drupal_config_sync_directory }}"
    state: directory
  when: project_type == "drupal" and drupal_major_version == "8" and drupal_config_sync_directory is defined

# Pantheon D7 sites don't have settings.php, so we add it for local dev.
- name: Custom core - add settings.php if it doesn't exist.
  template:
    # Src is relative to provisioning directory.
    src: "../scripts/post-provision/templates/default.settings.php.d{{ drupal_major_version }}.j2"
    dest: "{{ drupal_core_path }}/sites/{{ config_site_directory | default('default') }}/settings.php"
    mode: 0440
    force: no
    owner: "{{ drupal_core_owner }}"
    group: "{{ drupal_core_owner }}"
  when: project_type == "drupal" and custom_core_add_settings_local_php|default(True)

- name: Custom core - add settings.local.php.
  template:
    # Src is relative to provisioning directory.
    src: "../scripts/post-provision/templates/settings.local.php.d{{ drupal_major_version }}.j2"
    dest: "{{ drupal_core_path }}/sites/{{ config_site_directory | default('default') }}/settings.local.php"
    mode: 0440
    owner: "{{ drupal_core_owner }}"
    group: "{{ drupal_core_owner }}"
  when: project_type == "drupal" and custom_core_add_settings_local_php|default(True)

# # ansible drupalvm -e @default.config.yml -e @config.yml -m composer -a "working_dir={{ web_app_project_root }} command=install optimize_autoloader=True"
# # @todo: detect composer.json
# - name: Custom core - composer install.
#   composer:
#     working_dir: "{{ web_app_project_root }}"
#     command: install
#     optimize_autoloader: True
#   creates: "{{drupal_core_path}}/autoload.php"
#   # Run as normal user for security and to leverage vagrant-cachier.
#   becmore: no
