---
# Pulls database and files from prod instance.
# If there are tables in the local instance, the database import is skipped.

- name: Register information about the /vagrant directory.
  stat:
    path: /vagrant
  register: vagrant_directory

- name: Get prod instances.
  set_fact:
    prod_instances: "{{ instances | selectattr('env', 'equalto', 'prod') | list }}"

- name: Set prod instance.
  set_fact:
    prod_instance: "{{ prod_instances[0] }}"

- name: Get current table list.
  command: "mysql --batch --skip-column-names -e 'SHOW TABLES;' {{ db_name }}"
  register: db_tables_output

- name: Set `db_do_sync`.
  set_fact:
    db_do_sync: "{{ not do_db_import and db_tables_output.stdout_lines | length == 0 }}"

- name: Ensure prod SQL dump directory exists.
  # Delegate to localhost because we're performing an operation on prod, not on the
  # dev instance.
  delegate_to: localhost
  # Don't use 'become' for operations on localhost.
  become: no
  command: |
    ssh {{ prod_instance.drush_ssh_options | default('') }} {{ prod_instance.ssh_user }}@{{ prod_instance.ssh_host }} \
    'if [ ! -e '{{ db_remote_dump_directory }}' ]; then mkdir -p '{{ db_remote_dump_directory }}'; fi'
  when: db_do_sync

- name: Set SQL dump path.
  set_fact:
    # Dump file name should not end in '.gz'.  That extension will be added if required.
    database_dump_file: "{{ db_remote_dump_directory }}/PROD.{{ ansible_date_time.iso8601_basic_short }}.sql"
  when: db_do_sync

# Database dump command to be run on PROD server.
# This command should be executable via SSH from the dev machine, as a standard user.
# SSH key forwarding may be required, depending on the command that is run.
- name: Set SQL dump command -- Drupal.
  set_fact:
    db_dump_command: |
      drush @{{ cli_alias_file_prefix }}.prod sql-dump --nocolor --gzip --result-file={{ database_dump_file | regex_replace('\\.gz$', '') }} --structure-tables-list={{ db_dump_exclude_tables }}
  when: db_do_sync and project_type == 'drupal'

# Database dump command to be run on PROD server.
# This command should be executable via SSH from the dev machine, as a standard user.
# SSH key forwarding may be required, depending on the command that is run.
- name: Set SQL dump command -- WordPress.
  set_fact:
    db_dump_command: |
      wp --path=public_html db export - | gzip > {{ database_dump_file | regex_replace('\\.gz$', '') }}
  when: db_do_sync and project_type == 'wordpress'

- name: Create remote SQL dump.
  # No become, so that drush aliases in the normal user's directory can be found.
  become: no
  # Drush adds '.gz' if the `--gzip` option is used, so we remove it preemptively.
  command: "{{ db_dump_command }}"
  when: db_do_sync

- name: Ensure SQL dump destination directory exists.
  file:
    path: "{{ db_local_dump_directory | default('/tmp') }}"
    state: directory
  when: db_do_sync

- name: Set local SQL dump file path.
  set_fact:
    database_dump_file_local: "{{ db_local_dump_directory }}/{{ database_dump_file | basename }}.gz"
  when: db_do_sync

- name: Retrieve remote SQL dump.
  become: no
  # Use raw rsync because synchronize module wasn't working.
  # This command should be executable via SSH from the dev machine, as a standard user.
  # SSH key forwarding may be required, depending on the command that is run.
  command: "rsync -au --partial -e 'ssh {{ prod_instance.drush_ssh_options | default('') }}' {{ prod_instance.ssh_user }}@{{ prod_instance.ssh_host }}:{{ database_dump_file }}.gz {{ database_dump_file_local }}"
  when: db_do_sync

- name: Import dump file.
  mysql_db:
    login_user: "{{ db_user }}"
    login_password: "{{ db_password }}"
    name: "{{ db_name }}"
    state: import
    # '.gz' extension is handled automatically.
    target: "{{ database_dump_file_local }}"
  when: db_do_sync

- name: Set files sync command.
  set_fact:
    # Use raw rsync because `drush rsync` will be destructive if the aliases are incorrect,
    # and WP-CLI doesn't currently have something like `drush rsync` anyway.
    # This command should be executable via SSH from the dev machine, as a standard user.
    # SSH key forwarding may be required, depending on the command that is run.
    files_sync_command: "rsync {{ files_rsync_extra_args | default('') }} {{ files_rsync_excludes | default([]) |  map('regex_replace', '^(.*)$', '--exclude=\\1') | join(' ') }} -e 'ssh {{ prod_instance.drush_ssh_options | default('') }}' {{ prod_instance.ssh_user }}@{{ prod_instance.ssh_host }}:{{ prod_instance.root }}/{{ drupal_file_public_path }}/ {{ web_app_web_root }}/{{ drupal_file_public_path }}/"
  when: do_user_files_sync and project_type == 'drupal'

- name: Retrieve user files.
  become: no
  command: "{{ files_sync_command }}"
  when: do_user_files_sync
