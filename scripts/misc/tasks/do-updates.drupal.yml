---
# Tasks to perform Drupal code updates.

- name: Set drupal_update_security_only if it's not already defined.
  set_fact:
    drupal_update_security_only: True
  when: drupal_update_security_only is not defined

- name: Find updates.
  # TODO: Is the `-l` option necessary with sites.php?
  command: "{{ drush_path | default('drush') }} -l {{ config_site_directory }} pm-updatestatus {{ drupal_update_projects | default('') }} --pipe {{ drupal_update_security_only | default(True) | bool | ternary('--security-only', '') }}"
  args:
    chdir: "{{ drupal_core_path }}"
  register: updates_available

- name: Determine if this is composer project.
  stat: "path={{ web_app_project_root }}/composer.json"
  # Use drupal_deploy_composer_file for consistency & reuse with geerlinguy.drupal.
  register: drupal_deploy_composer_file

- name: Run `drush pm-updatecode` if not composer project.
  # TODO: Is the `-l` option necessary with sites.php?
  command: "{{ drush_path }} -l {{ config_site_directory }} pm-updatecode -y {{ item }}"
  args:
    chdir: "{{ drupal_core_path }}"
  with_items: "{{ updates_available.stdout_lines }}"
  register: drupal_updates_download
  when: drupal_deploy_composer_file.stat.exists == False

# Must define `drupal_updated` here before `drupal_updates_download` is reset below.
- name: Define `drupal_updated`.
  set_fact:
    drupal_updated: "{{ drupal_updates_download.changed | default(false) }}"
  when: drupal_deploy_composer_file.stat.exists == False

- name: Download updates with composer if composer project.
  composer:
    command: "update"
    # Substitutes "core" for "drupal".
    # Todo: make this substitution smarter, based on what's actually installed.
    arguments: "{{ updates_available.stdout_lines | map('regex_replace', '^drupal$', 'core') | map('regex_replace', '^(.*)$', 'drupal/\\1') | join(' ') }}"
    optimize_autoloader: True
    # By default, Drupal composer projects install dev dependencies.
    # We want to follow that behavior here.
    no_dev: False
    working_dir: "{{ web_app_project_root }}"
  with_items: "{{ updates_available.stdout_lines }}"
  register: drupal_updates_download
  when: drupal_deploy_composer_file.stat.exists == True

- name: Define `drupal_updated`.
  set_fact:
    drupal_updated: "{{ drupal_updates_download.changed | default(false) }}"
  when: drupal_deploy_composer_file.stat.exists == True

- name: Run Drupal post-update tasks.
  include_tasks: "{{ playbook_dir }}/roles/kentr.drupal/tasks/update.yml"
  when: drupal_updated | default(false)
